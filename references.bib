@inproceedings{abdullaEfficientHandlingStringnumber2020,
  title = {Efficient Handling of String-Number Conversion},
  booktitle = {Proceedings of the 41st {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Abdulla, Parosh Aziz and Atig, Mohamed Faouzi and Chen, Yu-Fang and Diep, Bui Phi and Dolby, Julian and Janků, Petr and Lin, Hsin-Hung and Holík, Lukáš and Wu, Wei-Cheng},
  date = {2020-06-11},
  pages = {943--957},
  publisher = {ACM},
  location = {London UK},
  doi = {10.1145/3385412.3386034},
  url = {https://dl.acm.org/doi/10.1145/3385412.3386034},
  urldate = {2025-05-10},
  eventtitle = {{{PLDI}} '20: 41st {{ACM SIGPLAN International Conference}} on {{Programming Language Design}} and {{Implementation}}},
  isbn = {978-1-4503-7613-6},
  langid = {english},
  file = {/Users/study/Zotero/storage/QJ7E2HD7/Abdulla et al. - 2020 - Efficient handling of string-number conversion.pdf}
}

@inproceedings{abdullaTrauSMTSolver2018,
  title = {Trau: {{SMT}} Solver for String Constraints},
  shorttitle = {Trau},
  booktitle = {2018 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  author = {Abdulla, Parosh Aziz and Faouzi Atig, Mohamed and Chen, Yu-Fang and Diep, Bui Phi and Holik, Lukas and Rezine, Ahmed and Rummer, Philipp},
  date = {2018-10},
  pages = {1--5},
  publisher = {IEEE},
  location = {Austin, TX},
  doi = {10.23919/FMCAD.2018.8602997},
  url = {https://ieeexplore.ieee.org/document/8602997/},
  urldate = {2025-04-27},
  eventtitle = {2018 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  isbn = {978-0-9835678-8-2},
  note = {Leetcode Strings}
}

@book{alurComputerAidedVerification2004,
  title = {Computer {{Aided Verification}}: 16th {{International Conference}}, {{CAV}} 2004, {{Boston}}, {{MA}}, {{USA}}, {{July}} 13-17, 2004, {{Proceedings}}},
  shorttitle = {Computer {{Aided Verification}}},
  author = {Alur, Rajeev and Peled, Doron},
  date = {2004},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  number = {3114},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/b98490},
  isbn = {978-3-540-22342-9},
  langid = {english},
  file = {/Users/study/Zotero/storage/HPJD8HF5/Alur and Peled - 2004 - Computer Aided Verification 16th International Conference, CAV 2004, Boston, MA, USA, July 13-17, 2.pdf}
}

@inproceedings{backesSemanticbasedAutomatedReasoning2018,
  title = {Semantic-Based {{Automated Reasoning}} for {{AWS Access Policies}} Using {{SMT}}},
  booktitle = {2018 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  author = {Backes, John and Bolignano, Pauline and Cook, Byron and Dodge, Catherine and Gacek, Andrew and Luckow, Kasper and Rungta, Neha and Tkachuk, Oksana and Varming, Carsten},
  date = {2018-10},
  pages = {1--9},
  publisher = {IEEE},
  location = {Austin, TX},
  doi = {10.23919/FMCAD.2018.8602994},
  url = {https://ieeexplore.ieee.org/document/8602994/},
  urldate = {2025-04-23},
  eventtitle = {2018 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  isbn = {978-0-9835678-8-2},
  file = {/Users/study/Zotero/storage/QH6AWGQ5/Backes et al. - 2018 - Semantic-based Automated Reasoning for AWS Access Policies using SMT.pdf}
}

@inproceedings{backesSemanticbasedAutomatedReasoning2018a,
  title = {Semantic-Based {{Automated Reasoning}} for {{AWS Access Policies}} Using {{SMT}}},
  booktitle = {2018 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  author = {Backes, John and Bolignano, Pauline and Cook, Byron and Dodge, Catherine and Gacek, Andrew and Luckow, Kasper and Rungta, Neha and Tkachuk, Oksana and Varming, Carsten},
  date = {2018-10},
  pages = {1--9},
  publisher = {IEEE},
  location = {Austin, TX},
  doi = {10.23919/FMCAD.2018.8602994},
  url = {https://ieeexplore.ieee.org/document/8602994/},
  urldate = {2025-05-02},
  eventtitle = {2018 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  isbn = {978-0-9835678-8-2},
  file = {/Users/study/Zotero/storage/I4ZMNM4V/Backes et al. - 2018 - Semantic-based Automated Reasoning for AWS Access Policies using SMT.pdf}
}

@incollection{barbosaCvc5VersatileIndustrialStrength2022,
  title = {Cvc5: {{A Versatile}} and {{Industrial-Strength SMT Solver}}},
  shorttitle = {Cvc5},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Barbosa, Haniel and Barrett, Clark and Brain, Martin and Kremer, Gereon and Lachnitt, Hanna and Mann, Makai and Mohamed, Abdalrhman and Mohamed, Mudathir and Niemetz, Aina and Nötzli, Andres and Ozdemir, Alex and Preiner, Mathias and Reynolds, Andrew and Sheng, Ying and Tinelli, Cesare and Zohar, Yoni},
  editor = {Fisman, Dana and Rosu, Grigore},
  date = {2022},
  volume = {13243},
  pages = {415--442},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-99524-9_24},
  url = {https://link.springer.com/10.1007/978-3-030-99524-9_24},
  urldate = {2025-06-10},
  abstract = {Abstract                            cvc5               is the latest SMT solver in the cooperating validity checker series and builds on the successful code base of CVC4. This paper serves as a comprehensive system description of               cvc5               ’s architectural design and highlights the major features and components introduced since CVC4 ~1.8. We evaluate               cvc5               ’s performance on all benchmarks in SMT-LIB and provide a comparison against CVC4 and Z3.},
  isbn = {978-3-030-99523-2 978-3-030-99524-9},
  langid = {english},
  file = {/Users/study/Zotero/storage/CYBH8E6E/Barbosa et al. - 2022 - cvc5 A Versatile and Industrial-Strength SMT Solver.pdf}
}

@inproceedings{berzishZ3str3StringSolver2017,
  title = {Z3str3: {{A String Solver}} with {{Theory-aware Heuristics}}},
  shorttitle = {Z3str3},
  booktitle = {2017 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  author = {Berzish, Murphy and Ganesh, Vijay and Zheng, Yunhui},
  date = {2017-10},
  pages = {55--59},
  publisher = {IEEE},
  location = {Vienna},
  doi = {10.23919/FMCAD.2017.8102241},
  url = {http://ieeexplore.ieee.org/document/8102241/},
  urldate = {2025-04-22},
  eventtitle = {2017 {{Formal Methods}} in {{Computer-Aided Design}} ({{FMCAD}})},
  isbn = {978-0-9835678-7-5},
  keywords = {solver},
  file = {/Users/study/Zotero/storage/NGINJUZU/Berzish et al. - 2017 - Z3str3 A String Solver with Theory-aware Heuristics.pdf}
}

@incollection{bjornerPathFeasibilityAnalysis2009,
  title = {Path {{Feasibility Analysis}} for {{String-Manipulating Programs}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Bjørner, Nikolaj and Tillmann, Nikolai and Voronkov, Andrei},
  editor = {Kowalewski, Stefan and Philippou, Anna},
  date = {2009},
  volume = {5505},
  pages = {307--321},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-00768-2_27},
  url = {http://link.springer.com/10.1007/978-3-642-00768-2_27},
  urldate = {2025-04-23},
  isbn = {978-3-642-00767-5 978-3-642-00768-2}
}

@incollection{bjornerProgrammingZ32019,
  title = {Programming {{Z3}}},
  booktitle = {Engineering {{Trustworthy Software Systems}}},
  author = {Bjørner, Nikolaj and De Moura, Leonardo and Nachmanson, Lev and Wintersteiger, Christoph M.},
  editor = {Bowen, Jonathan P. and Liu, Zhiming and Zhang, Zili},
  date = {2019},
  volume = {11430},
  pages = {148--201},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-17601-3_4},
  url = {http://link.springer.com/10.1007/978-3-030-17601-3_4},
  urldate = {2025-04-23},
  isbn = {978-3-030-17600-6 978-3-030-17601-3},
  langid = {english},
  file = {/Users/study/Zotero/storage/6J6D3P8T/Bjørner et al. - 2019 - Programming Z3.pdf;/Users/study/Zotero/storage/AWDZ7VUD/978-3-030-17601-3.pdf}
}

@incollection{blahoudekWordEquationsSynergy2023,
  title = {Word {{Equations}} in {{Synergy}} with {{Regular Constraints}}},
  booktitle = {Formal {{Methods}}},
  author = {Blahoudek, František and Chen, Yu-Fang and Chocholatý, David and Havlena, Vojtěch and Holík, Lukáš and Lengál, Ondřej and Síč, Juraj},
  editor = {Chechik, Marsha and Katoen, Joost-Pieter and Leucker, Martin},
  date = {2023},
  volume = {14000},
  pages = {403--423},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-031-27481-7_23},
  url = {https://link.springer.com/10.1007/978-3-031-27481-7_23},
  urldate = {2025-04-24},
  isbn = {978-3-031-27480-0 978-3-031-27481-7},
  langid = {english},
  note = {Stability}
}

@inproceedings{brennanConstraintNormalizationParameterized2017,
  title = {Constraint Normalization and Parameterized Caching for Quantitative Program Analysis},
  booktitle = {Proceedings of the 2017 11th {{Joint Meeting}} on {{Foundations}} of {{Software Engineering}}},
  author = {Brennan, Tegan and Tsiskaridze, Nestan and Rosner, Nicolás and Aydin, Abdulbaki and Bultan, Tevfik},
  date = {2017-08-21},
  pages = {535--546},
  publisher = {ACM},
  location = {Paderborn Germany},
  doi = {10.1145/3106237.3106303},
  url = {https://dl.acm.org/doi/10.1145/3106237.3106303},
  urldate = {2025-04-27},
  eventtitle = {{{ESEC}}/{{FSE}}'17: {{Joint Meeting}} of the {{European Software Engineering Conference}} and the {{ACM SIGSOFT Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  isbn = {978-1-4503-5105-8},
  langid = {english},
  note = {Cashew}
}

@article{chenDecisionProceduresPath2019,
  title = {Decision Procedures for Path Feasibility of String-Manipulating Programs with Complex Operations},
  author = {Chen, Taolue and Hague, Matthew and Lin, Anthony W. and Rümmer, Philipp and Wu, Zhilin},
  date = {2019-01-02},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {3},
  pages = {1--30},
  issn = {2475-1421},
  doi = {10.1145/3290362},
  url = {https://dl.acm.org/doi/10.1145/3290362},
  urldate = {2025-05-10},
  abstract = {The design and implementation of decision procedures for checking path feasibility in string-manipulating programs is an important problem, with such applications as symbolic execution of programs with strings and automated detection of cross-site scripting (XSS) vulnerabilities in web applications. A (symbolic) path is given as a finite sequence of assignments and assertions (i.e. without loops), and checking its feasibility amounts to determining the existence of inputs that yield a successful execution. Modern programming languages (e.g. JavaScript, PHP, and Python) support many complex string operations, and strings are also often implicitly modified during a computation in some intricate fashion (e.g. by some autoescaping mechanisms).                            In this paper we provide two general semantic conditions which together ensure the decidability of path feasibility: (1) each assertion admits regular monadic decomposition (i.e. is an effectively recognisable relation), and (2) each assignment uses a (possibly nondeterministic) function whose inverse relation preserves regularity. We show that the semantic conditions are               expressive               since they are satisfied by a multitude of string operations including concatenation, one-way and two-way finite-state transducers, replaceall functions (where the replacement string could contain variables), string-reverse functions, regular-expression matching, and some (restricted) forms of letter-counting/length functions. The semantic conditions also strictly subsume existing decidable string theories (e.g. straight-line fragments, and acyclic logics), and most existing benchmarks (e.g. most of Kaluza’s, and all of SLOG’s, Stranger’s, and SLOTH’s benchmarks). Our semantic conditions also yield a conceptually               simple               decision procedure, as well as an               extensible               architecture of a string solver in that a user may easily incorporate his/her own string functions into the solver by simply providing code for the pre-image computation without worrying about other parts of the solver. Despite these, the semantic conditions are unfortunately too general to provide a fast and complete decision procedure. We provide strong theoretical evidence for this in the form of complexity results. To rectify this problem, we propose two solutions. Our main solution is to allow only partial string functions (i.e., prohibit nondeterminism) in condition (2). This restriction is satisfied in many cases in practice, and yields decision procedures that are effective in both theory and practice. Whenever nondeterministic functions are still needed (e.g. the string function split), our second solution is to provide a syntactic fragment that provides a support of nondeterministic functions, and operations like one-way transducers, replaceall (with constant replacement string), the string-reverse function, concatenation, and regular-expression matching. We show that this fragment can be reduced to an existing solver SLOTH that exploits fast model checking algorithms like IC3.                          We provide an efficient implementation of our decision procedure (assuming our first solution above, i.e., deterministic partial string functions) in a new string solver OSTRICH. Our implementation provides built-in support for concatenation, reverse, functional transducers (FFT), and replaceall and provides a framework for extensibility to support further string functions. We demonstrate the efficacy of our new solver against other competitive solvers.},
  issue = {POPL},
  langid = {english},
  note = {OSTRICHT
\par
\href{https://github.com/uuverifiers/ostrich/}{https://github.com/uuverifiers/ostrich/}},
  file = {/Users/study/Zotero/storage/SDQBPJMM/Chen et al. - 2019 - Decision procedures for path feasibility of string-manipulating programs with complex operations.pdf}
}

@article{chenSolvingStringConstraints2023,
  title = {Solving {{String Constraints}} with {{Lengths}} by {{Stabilization}}},
  author = {Chen, Yu-Fang and Chocholatý, David and Havlena, Vojtěch and Holík, Lukáš and Lengál, Ondřej and Síč, Juraj},
  date = {2023-10-16},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {7},
  pages = {2112--2141},
  issn = {2475-1421},
  doi = {10.1145/3622872},
  url = {https://dl.acm.org/doi/10.1145/3622872},
  urldate = {2025-04-24},
  abstract = {We present a new algorithm for solving string constraints. The algorithm builds upon a recent method for solving word equations and regular constraints that interprets string variables as languages rather than strings and, consequently, mitigates the combinatorial explosion that plagues other approaches. We extend the approach to handle linear integer arithmetic length constraints by combination with a known principle of equation alignment and splitting, and by extension to other common types of string constraints, yielding a fully-fledged string solver. The ability of the framework to handle unrestricted disequalities even extends one of the largest decidable classes of string constraints, the chain-free fragment. We integrate our algorithm into a DPLL-based SMT solver. The performance of our implementation is competitive and even significantly better than state-of-the-art string solvers on several established benchmarks obtained from applications in verification of string programs.},
  issue = {OOPSLA2},
  langid = {english},
  file = {/Users/study/Zotero/storage/HGSBC3IL/Chen et al. - 2023 - Solving String Constraints with Lengths by Stabilization.pdf}
}

@incollection{chenZ3NoodlerAutomatabasedString2024,
  title = {Z3-{{Noodler}}: {{An Automata-based String Solver}}},
  shorttitle = {Z3-{{Noodler}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Chen, Yu-Fang and Chocholatý, David and Havlena, Vojtěch and Holík, Lukáš and Lengál, Ondřej and Síč, Juraj},
  editor = {Finkbeiner, Bernd and Kovács, Laura},
  date = {2024},
  volume = {14570},
  pages = {24--33},
  publisher = {Springer Nature Switzerland},
  location = {Cham},
  doi = {10.1007/978-3-031-57246-3_2},
  url = {https://link.springer.com/10.1007/978-3-031-57246-3_2},
  urldate = {2025-04-23},
  abstract = {Abstract                            Z3-Noodler               is a~fork of               Z3               that replaces its string theory solver with a~custom solver implementing the recently introduced stabilization-based algorithm for solving word equations with regular constraints. An extensive experimental evaluation shows that               Z3-Noodler               is a~fully-fledged solver that can compete with state-of-the-art solvers, surpassing them by far on many benchmarks. Moreover, it is often complementary to other solvers, making it a~suitable choice as a~candidate to a~solver portfolio.},
  isbn = {978-3-031-57245-6 978-3-031-57246-3},
  langid = {english},
  keywords = {solver},
  file = {/Users/study/Zotero/storage/IZJ2AJE4/Chen et al. - 2024 - Z3-Noodler An Automata-based String Solver.pdf}
}

@incollection{chenZ3NoodlerAutomatabasedString2024a,
  title = {Z3-{{Noodler}}: {{An Automata-based String Solver}}},
  shorttitle = {Z3-{{Noodler}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Chen, Yu-Fang and Chocholatý, David and Havlena, Vojtěch and Holík, Lukáš and Lengál, Ondřej and Síč, Juraj},
  editor = {Finkbeiner, Bernd and Kovács, Laura},
  date = {2024},
  volume = {14570},
  pages = {24--33},
  publisher = {Springer Nature Switzerland},
  location = {Cham},
  doi = {10.1007/978-3-031-57246-3_2},
  url = {https://link.springer.com/10.1007/978-3-031-57246-3_2},
  urldate = {2025-04-24},
  abstract = {Abstract                            Z3-Noodler               is a~fork of               Z3               that replaces its string theory solver with a~custom solver implementing the recently introduced stabilization-based algorithm for solving word equations with regular constraints. An extensive experimental evaluation shows that               Z3-Noodler               is a~fully-fledged solver that can compete with state-of-the-art solvers, surpassing them by far on many benchmarks. Moreover, it is often complementary to other solvers, making it a~suitable choice as a~candidate to a~solver portfolio.},
  isbn = {978-3-031-57245-6 978-3-031-57246-3},
  langid = {english},
  file = {/Users/study/Zotero/storage/WCBSSCAZ/Chen et al. - 2024 - Z3-Noodler An Automata-based String Solver.pdf}
}

@incollection{dantoniPowerSymbolicAutomata2017,
  title = {The {{Power}} of {{Symbolic Automata}} and {{Transducers}}},
  booktitle = {Computer {{Aided Verification}}},
  author = {D’Antoni, Loris and Veanes, Margus},
  editor = {Majumdar, Rupak and Kunčak, Viktor},
  date = {2017},
  volume = {10426},
  pages = {47--67},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-63387-9_3},
  url = {https://link.springer.com/10.1007/978-3-319-63387-9_3},
  urldate = {2025-04-23},
  isbn = {978-3-319-63386-2 978-3-319-63387-9},
  langid = {english},
  file = {/Users/study/Zotero/storage/Q2WU2AWH/D’Antoni and Veanes - 2017 - The Power of Symbolic Automata and Transducers.pdf}
}

@incollection{demouraEfficientEMatchingSMT2007,
  title = {Efficient {{E-Matching}} for {{SMT Solvers}}},
  booktitle = {Automated {{Deduction}} – {{CADE-21}}},
  author = {De Moura, Leonardo and Bjørner, Nikolaj},
  editor = {Pfenning, Frank},
  date = {2007},
  volume = {4603},
  pages = {183--198},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-540-73595-3_13},
  url = {http://link.springer.com/10.1007/978-3-540-73595-3_13},
  urldate = {2025-04-22},
  isbn = {978-3-540-73594-6 978-3-540-73595-3},
  file = {/Users/study/Zotero/storage/883UZIAP/De Moura and Bjørner - 2007 - Efficient E-Matching for SMT Solvers.pdf}
}

@incollection{demouraStrategyChallengeSMT2013,
  title = {The {{Strategy Challenge}} in {{SMT Solving}}},
  booktitle = {Automated {{Reasoning}} and {{Mathematics}}},
  author = {De Moura, Leonardo and Passmore, Grant Olney},
  editor = {Bonacina, Maria Paola and Stickel, Mark E.},
  date = {2013},
  volume = {7788},
  pages = {15--44},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-36675-8_2},
  url = {http://link.springer.com/10.1007/978-3-642-36675-8_2},
  urldate = {2025-04-22},
  isbn = {978-3-642-36674-1 978-3-642-36675-8},
  note = {Here they introduce “tactics”},
  file = {/Users/study/Zotero/storage/4FJET57T/De Moura and Passmore - 2013 - The Strategy Challenge in SMT Solving.pdf}
}

@incollection{demouraZ3EfficientSMT2008,
  title = {Z3: {{An Efficient SMT Solver}}},
  shorttitle = {Z3},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {De Moura, Leonardo and Bjørner, Nikolaj},
  editor = {Ramakrishnan, C. R. and Rehof, Jakob},
  editora = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard},
  editoratype = {redactor},
  date = {2008},
  volume = {4963},
  pages = {337--340},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-540-78800-3_24},
  url = {http://link.springer.com/10.1007/978-3-540-78800-3_24},
  urldate = {2025-05-25},
  isbn = {978-3-540-78799-0 978-3-540-78800-3},
  file = {/Users/study/Zotero/storage/2XEEIVPI/De Moura and Bjørner - 2008 - Z3 An Efficient SMT Solver.pdf}
}

@inproceedings{donaldsonNoTitleFound2020a,
  title = {[{{No}} Title Found]},
  booktitle = {Proceedings of the 41st {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Donaldson, Alastair F. and Torlak, Emina},
  date = {2020-06-11},
  publisher = {ACM},
  location = {London UK},
  eventtitle = {{{PLDI}} '20: 41st {{ACM SIGPLAN International Conference}} on {{Programming Language Design}} and {{Implementation}}},
  isbn = {978-1-4503-7613-6},
  langid = {english}
}

@inproceedings{emmiDynamicTestInput2007,
  title = {Dynamic Test Input Generation for Database Applications},
  booktitle = {Proceedings of the 2007 International Symposium on {{Software}} Testing and Analysis},
  author = {Emmi, Michael and Majumdar, Rupak and Sen, Koushik},
  date = {2007-07-09},
  pages = {151--162},
  publisher = {ACM},
  location = {London United Kingdom},
  doi = {10.1145/1273463.1273484},
  url = {https://dl.acm.org/doi/10.1145/1273463.1273484},
  urldate = {2025-04-23},
  eventtitle = {{{ISSTA07}}: {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {978-1-59593-734-6},
  langid = {english},
  file = {/Users/study/Zotero/storage/S2Q5K54T/Emmi et al. - 2007 - Dynamic test input generation for database applications.pdf}
}

@article{flemingHowNotLie1986,
  title = {How Not to Lie with Statistics: The Correct Way to Summarize Benchmark Results},
  shorttitle = {How Not to Lie with Statistics},
  author = {Fleming, Philip J. and Wallace, John J.},
  date = {1986-03},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {29},
  number = {3},
  pages = {218--221},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/5666.5673},
  url = {https://dl.acm.org/doi/10.1145/5666.5673},
  urldate = {2025-06-11},
  abstract = {Using the arithmetic mean to summarize normalized benchmark results leads to mistaken conclusions that can be avoided by using the preferred method: the geometric mean.},
  langid = {english}
}

@incollection{ganzingerDPLLTFastDecision2004,
  title = {{{DPLL}}({{T}}): {{Fast Decision Procedures}}},
  shorttitle = {{{DPLL}}({{T}})},
  booktitle = {Computer {{Aided Verification}}},
  author = {Ganzinger, Harald and Hagen, George and Nieuwenhuis, Robert and Oliveras, Albert and Tinelli, Cesare},
  editor = {Alur, Rajeev and Peled, Doron A.},
  editora = {Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard},
  editoratype = {redactor},
  date = {2004},
  volume = {3114},
  pages = {175--188},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-540-27813-9_14},
  url = {http://link.springer.com/10.1007/978-3-540-27813-9_14},
  urldate = {2025-05-25},
  isbn = {978-3-540-22342-9 978-3-540-27813-9},
  langid = {english},
  file = {/Users/study/Zotero/storage/IKAHWMY3/Ganzinger et al. - 2004 - DPLL(T) Fast Decision Procedures.pdf}
}

@article{havlenaCookingStringIntegerConversions2024,
  title = {Cooking {{String-Integer Conversions}} with {{Noodles}}},
  author = {Havlena, Vojtěch and Holík, Lukáš and Lengál, Ondřej and Síč, Juraj},
  editor = {Chakraborty, Supratik and Jiang, Jie-Hong Roland},
  date = {2024},
  journaltitle = {LIPIcs, Volume 305, SAT 2024},
  volume = {305},
  pages = {14:1-14:19},
  publisher = {Schloss Dagstuhl – Leibniz-Zentrum für Informatik},
  issn = {1868-8969},
  doi = {10.4230/LIPICS.SAT.2024.14},
  url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.SAT.2024.14},
  urldate = {2025-04-24},
  abstract = {We propose a method for efficient handling string constraints with string-integer conversions. It extends the recently introduced stabilization-based procedure for solving string (dis)equations with regular and length constraints. Our approach is to translate the conversions into a linear integer arithmetic formula, together with regular constraints and word equations. We have integrated it into the string solver Z3-Noodler, and our experiments show that it is competitive and on some established benchmarks even several orders of magnitude faster than the state of the art.},
  isbn = {9783959773348},
  langid = {english},
  keywords = {SMT solving,string conversions,string solving,Theory of computation → Logic and verification},
  note = {\subsection{SeriesInformation}

LIPIcs, Vol. 305, 27th International Conference on Theory and Applications of Satisfiability Testing (SAT 2024), pages 14:1-14:19}
}

@article{holikStringConstraintsConcatenation2018,
  title = {String Constraints with Concatenation and Transducers Solved Efficiently},
  author = {Holík, Lukáš and Janků, Petr and Lin, Anthony W. and Rümmer, Philipp and Vojnar, Tomáš},
  date = {2018-01},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {2},
  pages = {1--32},
  issn = {2475-1421},
  doi = {10.1145/3158092},
  url = {https://dl.acm.org/doi/10.1145/3158092},
  urldate = {2025-04-27},
  abstract = {String analysis is the problem of reasoning about how strings are manipulated by a program. It has numerous applications including automatic detection of cross-site scripting, and automatic test-case generation. A~popular string analysis technique includes symbolic executions, which at their core use constraint solvers over the string domain, a.k.a. string solvers. Such solvers typically reason about constraints expressed in theories over strings with the concatenation operator as an atomic constraint. In recent years, researchers started to recognise the importance of incorporating the replace-all operator (i.e. replace all occurrences of a string by another string) and, more generally, finite-state transductions in the theories of strings with concatenation. Such string operations are typically crucial for reasoning about XSS vulnerabilities in web applications, especially for modelling sanitisation functions and implicit browser transductions (e.g. innerHTML). Although this results in an undecidable theory in general, it was recently shown that the straight-line fragment of the theory is decidable, and is sufficiently expressive in practice. In this paper, we provide the first string solver that can reason about constraints involving both concatenation and finite-state transductions. Moreover, it has a completeness and termination guarantee for several important fragments (e.g. straight-line fragment). The main challenge addressed in the paper is the prohibitive worst-case complexity of the theory (double-exponential time), which is exponentially harder than the case without finite-state transductions. To this end, we propose a method that exploits succinct alternating finite-state automata as concise symbolic representations of string constraints. In contrast to previous approaches using nondeterministic automata, alternation offers not only exponential savings in space when representing Boolean combinations of transducers, but also a possibility of succinct representation of otherwise costly combinations of transducers and concatenation. Reasoning about the emptiness of the AFA language requires a state-space exploration in an exponential-sized graph, for which we use model checking algorithms (e.g.~IC3). We have implemented our algorithm and demonstrated its efficacy on benchmarks that are derived from cross-site scripting analysis and other examples in the literature.},
  issue = {POPL},
  langid = {english},
  note = {Sloth},
  file = {/Users/study/Zotero/storage/BZ4J4BLI/Holík et al. - 2018 - String constraints with concatenation and transducers solved efficiently.pdf}
}

@dataset{julianthomeIntegratedApproachEffective2018,
  title = {An {{Integrated Approach}} for {{Effective Injection Vulnerability Analysis}} of {{Web Applications}} through {{Security Slicing}} and {{Hybrid Constraint Solving}}},
  author = {Julian Thomé, Lwin Khin Shar},
  date = {2018},
  publisher = {IEEE Dataport},
  doi = {10.21227/H2ZQ1N},
  url = {https://ieee-dataport.org/documents/integrated-approach-effective-injection-vulnerability-analysis-web-applications-through},
  urldate = {2025-04-27},
  note = {JOACO}
}

@incollection{karpReducibilityCombinatorialProblems1972,
  title = {Reducibility among {{Combinatorial Problems}}},
  booktitle = {Complexity of {{Computer Computations}}},
  author = {Karp, Richard M.},
  editor = {Miller, Raymond E. and Thatcher, James W. and Bohlinger, Jean D.},
  date = {1972},
  pages = {85--103},
  publisher = {Springer US},
  location = {Boston, MA},
  doi = {10.1007/978-1-4684-2001-2_9},
  url = {http://link.springer.com/10.1007/978-1-4684-2001-2_9},
  urldate = {2025-06-17},
  isbn = {978-1-4684-2003-6 978-1-4684-2001-2},
  langid = {english}
}

@inproceedings{kauslerEvaluationStringConstraint2014,
  title = {Evaluation of String Constraint Solvers in the Context of Symbolic Execution},
  booktitle = {Proceedings of the 29th {{ACM}}/{{IEEE International Conference}} on {{Automated Software Engineering}}},
  author = {Kausler, Scott and Sherman, Elena},
  date = {2014-09-15},
  pages = {259--270},
  publisher = {ACM},
  location = {Vasteras Sweden},
  doi = {10.1145/2642937.2643003},
  url = {https://dl.acm.org/doi/10.1145/2642937.2643003},
  urldate = {2025-04-27},
  eventtitle = {{{ASE}} '14: {{ACM}}/{{IEEE International Conference}} on {{Automated Software Engineering}}},
  isbn = {978-1-4503-3013-8},
  langid = {english},
  note = {Kausler}
}

@inproceedings{kiezunHAMPISolverString2009,
  title = {{{HAMPI}}: A Solver for String Constraints},
  shorttitle = {{{HAMPI}}},
  booktitle = {Proceedings of the Eighteenth International Symposium on {{Software}} Testing and Analysis},
  author = {Kiezun, Adam and Ganesh, Vijay and Guo, Philip J. and Hooimeijer, Pieter and Ernst, Michael D.},
  date = {2009-07-19},
  pages = {105--116},
  publisher = {ACM},
  location = {Chicago IL USA},
  doi = {10.1145/1572272.1572286},
  url = {https://dl.acm.org/doi/10.1145/1572272.1572286},
  urldate = {2025-04-23},
  eventtitle = {{{ISSTA}} '09: {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {978-1-60558-338-9},
  langid = {english},
  file = {/Users/study/Zotero/storage/TB33LF8Q/Kiezun et al. - 2009 - HAMPI a solver for string constraints.pdf}
}

@article{koehlerGuidedEqualitySaturation2024,
  title = {Guided {{Equality Saturation}}},
  author = {Kœhler, Thomas and Goens, Andrés and Bhat, Siddharth and Grosser, Tobias and Trinder, Phil and Steuwer, Michel},
  date = {2024-01-05},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {8},
  pages = {1727--1758},
  issn = {2475-1421},
  doi = {10.1145/3632900},
  url = {https://dl.acm.org/doi/10.1145/3632900},
  urldate = {2025-05-22},
  abstract = {Rewriting is a principled term transformation technique with uses across theorem   proving and compilation.   In theorem proving, each rewrite is a proof step; in compilation, rewrites optimize a program term.   While developing rewrite sequences manually is possible, this process does not   scale to larger rewrite sequences. Automated rewriting   techniques, like greedy simplification or equality saturation, work well   without requiring human input.   Yet, they do not scale to large search spaces, limiting the complexity of tasks where automated rewriting is effective,   and meaning that just a small increase in term size or rewrite length may result in failure.      This paper proposes a semi-automatic rewriting technique as a means to scale rewriting by allowing   human insight at key decision points.   Specifically, we propose               guided equality saturation               that embraces human guidance when fully automated equality saturation does not scale.   The rewriting is split into two simpler automatic equality saturation steps: from the original term to a human-provided intermediate               guide               , and from the guide to the target. Complex rewriting tasks may require multiple guides, resulting in a sequence of equality saturation steps.   A guide can be a complete term, or a               sketch               containing undefined elements that are instantiated by the equality saturation search.   Such sketches may be far more concise than complete terms.      We demonstrate the generality and effectiveness of guided equality saturation using two case studies.   First, we integrate guided equality saturation in the Lean 4 proof assistant.   Proofs are written in the style of textbook proof sketches, as a series of calculations omitting details and skipping steps.   These proofs conclude in less than a second instead of minutes when compared to unguided equality saturation, and can   find complex proofs that previously had to be done manually.   Second, in the compiler of the Rise array language, where unguided equality saturation fails to perform optimizations within an hour and using 60 GB of memory, guided equality saturation performs the same optimizations with at most 3 guides, within seconds using less than 1 GB memory.},
  issue = {POPL},
  langid = {english},
  file = {/Users/study/Zotero/storage/WMB475SI/Kœhler et al. - 2024 - Guided Equality Saturation.pdf}
}

@inproceedings{liuLLMEnhancedTheoremProving2024,
  title = {{{LLM-Enhanced Theorem Proving}} with {{Term Explanation}} and {{Tactic Parameter Repair}}✱},
  booktitle = {Proceedings of the 15th {{Asia-Pacific Symposium}} on {{Internetware}}},
  author = {Liu, Xingpeng and Liu, Hengzhu and Yi, Xiaodong and Wang, Ji},
  date = {2024-07-24},
  pages = {21--30},
  publisher = {ACM},
  location = {Macau China},
  doi = {10.1145/3671016.3674823},
  url = {https://dl.acm.org/doi/10.1145/3671016.3674823},
  urldate = {2025-04-25},
  eventtitle = {Internetware 2024: 15th {{Asia-Pacific Symposium}} on {{Internetware}}},
  isbn = {979-8-4007-0705-6},
  langid = {english}
}

@online{luLayeredStagedMonte2024,
  title = {Layered and {{Staged Monte Carlo Tree Search}} for {{SMT Strategy Synthesis}}},
  author = {Lu, Zhengyang and Siemer, Stefan and Jha, Piyush and Day, Joel and Manea, Florin and Ganesh, Vijay},
  date = {2024},
  doi = {10.48550/ARXIV.2401.17159},
  url = {https://arxiv.org/abs/2401.17159},
  urldate = {2025-06-02},
  abstract = {Modern SMT solvers, such as Z3, offer user-controllable strategies, enabling users to tailor solving strategies for their unique set of instances, thus dramatically enhancing solver performance for their use case. However, this approach of strategy customization presents a significant challenge: handcrafting an optimized strategy for a class of SMT instances remains a complex and demanding task for both solver developers and users alike.  In this paper, we address this problem of automatic SMT strategy synthesis via a novel Monte Carlo Tree Search (MCTS) based method. Our method treats strategy synthesis as a sequential decision-making process, whose search tree corresponds to the strategy space, and employs MCTS to navigate this vast search space. The key innovations that enable our method to identify effective strategies, while keeping costs low, are the ideas of layered and staged MCTS search. These novel heuristics allow for a deeper and more efficient exploration of the strategy space, enabling us to synthesize more effective strategies than the default ones in state-of-the-art (SOTA) SMT solvers. We implement our method, dubbed Z3alpha, as part of the Z3 SMT solver. Through extensive evaluations across six important SMT logics, Z3alpha demonstrates superior performance compared to the SOTA synthesis tool FastSMT, the default Z3 solver, and the CVC5 solver on most benchmarks. Remarkably, on a challenging QF\_BV benchmark set, Z3alpha solves 42.7\% more instances than the default strategy in the Z3 SMT solver.},
  pubstate = {prepublished},
  version = {2},
  keywords = {Artificial Intelligence (cs.AI),FOS: Computer and information sciences,Logic in Computer Science (cs.LO),Software Engineering (cs.SE)},
  note = {\subsection{Other}

Accepted at IJCAI 2024}
}

@book{majumdarComputerAidedVerification2017,
  title = {Computer {{Aided Verification}}: 29th {{International Conference}}, {{CAV}} 2017, {{Heidelberg}}, {{Germany}}, {{July}} 24-28, 2017, {{Proceedings}}, {{Part II}}},
  shorttitle = {Computer {{Aided Verification}}},
  editor = {Majumdar, Rupak and Kunčak, Viktor},
  date = {2017},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {10427},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-63390-9},
  url = {https://link.springer.com/10.1007/978-3-319-63390-9},
  urldate = {2025-04-27},
  isbn = {978-3-319-63389-3 978-3-319-63390-9},
  langid = {english},
  note = {PyEx},
  file = {/Users/study/Zotero/storage/X8VNQE8M/Majumdar and Kunčak - 2017 - Computer Aided Verification 29th International Conference, CAV 2017, Heidelberg, Germany, July 24-2.pdf}
}

@incollection{moraZ3str4MultiarmedString2021,
  title = {Z3str4: {{A Multi-armed String Solver}}},
  shorttitle = {Z3str4},
  booktitle = {Formal {{Methods}}},
  author = {Mora, Federico and Berzish, Murphy and Kulczynski, Mitja and Nowotka, Dirk and Ganesh, Vijay},
  editor = {Huisman, Marieke and Păsăreanu, Corina and Zhan, Naijun},
  date = {2021},
  volume = {13047},
  pages = {389--406},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-90870-6_21},
  url = {https://link.springer.com/10.1007/978-3-030-90870-6_21},
  urldate = {2025-04-23},
  isbn = {978-3-030-90869-0 978-3-030-90870-6},
  langid = {english},
  file = {/Users/study/Zotero/storage/QUM5QBAN/Mora et al. - 2021 - Z3str4 A Multi-armed String Solver.pdf}
}

@incollection{moraZ3str4MultiarmedString2021a,
  title = {Z3str4: {{A Multi-armed String Solver}}},
  shorttitle = {Z3str4},
  booktitle = {Formal {{Methods}}},
  author = {Mora, Federico and Berzish, Murphy and Kulczynski, Mitja and Nowotka, Dirk and Ganesh, Vijay},
  editor = {Huisman, Marieke and Păsăreanu, Corina and Zhan, Naijun},
  date = {2021},
  volume = {13047},
  pages = {389--406},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-90870-6_21},
  url = {https://link.springer.com/10.1007/978-3-030-90870-6_21},
  urldate = {2025-04-23},
  isbn = {978-3-030-90869-0 978-3-030-90870-6},
  langid = {english},
  file = {/Users/study/Zotero/storage/DQF82H5Z/Mora et al. - 2021 - Z3str4 A Multi-armed String Solver.pdf}
}

@dataset{preinerSMTLIBRelease20242024,
  title = {{{SMT-LIB}} Release 2024 (Non-Incremental Benchmarks)},
  author = {Preiner, Mathias and Schurr, Hans-Jörg and Barrett, Clark and Fontaine, Pascal and Niemetz, Aina and Tinelli, Cesare},
  date = {2024-04-24},
  publisher = {Zenodo},
  doi = {10.5281/ZENODO.11061096},
  url = {https://zenodo.org/doi/10.5281/zenodo.11061096},
  urldate = {2025-05-10},
  abstract = {This is the SMT-LIB benchmark library: a large library of input problems, or benchmarks, written in the SMT-LIB language. More information about the SMT-LIB initiative can be found at https://smt-lib.org. The contributor and licence of each benchmark is indicated in the metadata fields of each benchmark file. This collection contains the~non-incremental benchmarks. Benchmarks are grouped by logic and compressed with the zstd compression algorithm using the tar --zstd. SMT-LIB benchmarks usually have a very high compression rate, be aware of the required disk space when uncompressing the archives. You can find the size of each archive in compressed and uncompressed form in the following list.},
  version = {2024.04.23}
}

@dataset{preinerSMTLIBRelease20242024a,
  title = {{{SMT-LIB}} Release 2024 (Non-Incremental Benchmarks)},
  author = {Preiner, Mathias and Schurr, Hans-Jörg and Barrett, Clark and Fontaine, Pascal and Niemetz, Aina and Tinelli, Cesare},
  date = {2024-04-24},
  publisher = {Zenodo},
  doi = {10.5281/ZENODO.11061097},
  url = {https://zenodo.org/doi/10.5281/zenodo.11061097},
  urldate = {2025-05-10},
  abstract = {This is the SMT-LIB benchmark library: a large library of input problems, or benchmarks, written in the SMT-LIB language. More information about the SMT-LIB initiative can be found at https://smt-lib.org. The contributor and licence of each benchmark is indicated in the metadata fields of each benchmark file. This collection contains the~non-incremental benchmarks. Benchmarks are grouped by logic and compressed with the zstd compression algorithm using the tar --zstd. SMT-LIB benchmarks usually have a very high compression rate, be aware of the required disk space when uncompressing the archives. You can find the size of each archive in compressed and uncompressed form in the following list.},
  version = {2024.04.23}
}

@dataset{preinerSMTLIBRelease20242024b,
  title = {{{SMT-LIB}} Release 2024 (Non-Incremental Benchmarks)},
  author = {Preiner, Mathias and Schurr, Hans-Jörg and Barrett, Clark and Fontaine, Pascal and Niemetz, Aina and Tinelli, Cesare},
  date = {2024-04-24},
  publisher = {Zenodo},
  doi = {10.5281/ZENODO.11061097},
  url = {https://zenodo.org/doi/10.5281/zenodo.11061097},
  urldate = {2025-06-17},
  abstract = {This is the SMT-LIB benchmark library: a large library of input problems, or benchmarks, written in the SMT-LIB language. More information about the SMT-LIB initiative can be found at https://smt-lib.org. The contributor and licence of each benchmark is indicated in the metadata fields of each benchmark file. This collection contains the~non-incremental benchmarks. Benchmarks are grouped by logic and compressed with the zstd compression algorithm using the tar --zstd. SMT-LIB benchmarks usually have a very high compression rate, be aware of the required disk space when uncompressing the archives. You can find the size of each archive in compressed and uncompressed form in the following list.},
  version = {2024.04.23}
}

@inproceedings{redelinghuysSymbolicExecutionPrograms2012,
  title = {Symbolic Execution of Programs with Strings},
  booktitle = {Proceedings of the {{South African Institute}} for {{Computer Scientists}} and {{Information Technologists Conference}}},
  author = {Redelinghuys, Gideon and Visser, Willem and Geldenhuys, Jaco},
  date = {2012-10},
  pages = {139--148},
  publisher = {ACM},
  location = {Pretoria South Africa},
  doi = {10.1145/2389836.2389853},
  url = {https://dl.acm.org/doi/10.1145/2389836.2389853},
  urldate = {2025-04-23},
  eventtitle = {{{SAICSIT}} '12: 2012 {{South African Institute}} of {{Computer Scientists}} and {{Information Technologists Conference}}},
  isbn = {978-1-4503-1308-7},
  langid = {english}
}

@incollection{reynoldsScalingDPLLTString2017,
  title = {Scaling {{Up DPLL}}({{T}}) {{String Solvers Using Context-Dependent Simplification}}},
  booktitle = {Computer {{Aided Verification}}},
  author = {Reynolds, Andrew and Woo, Maverick and Barrett, Clark and Brumley, David and Liang, Tianyi and Tinelli, Cesare},
  editor = {Majumdar, Rupak and Kunčak, Viktor},
  date = {2017},
  volume = {10427},
  pages = {453--474},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-63390-9_24},
  url = {https://link.springer.com/10.1007/978-3-319-63390-9_24},
  urldate = {2025-05-25},
  isbn = {978-3-319-63389-3 978-3-319-63390-9},
  langid = {english},
  file = {/Users/study/Zotero/storage/VZB89SZZ/Reynolds et al. - 2017 - Scaling Up DPLL(T) String Solvers Using Context-Dependent Simplification.pdf}
}

@incollection{rungtaBillionSMTQueries2022,
  title = {A {{Billion SMT Queries}} a {{Day}} ({{Invited Paper}})},
  booktitle = {Computer {{Aided Verification}}},
  author = {Rungta, Neha},
  editor = {Shoham, Sharon and Vizel, Yakir},
  date = {2022},
  volume = {13371},
  pages = {3--18},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-031-13185-1_1},
  url = {https://link.springer.com/10.1007/978-3-031-13185-1_1},
  urldate = {2025-05-02},
  abstract = {Abstract                            Amazon Web Services (AWS) is a cloud computing services provider that has made significant investments in applying formal methods to proving correctness of its internal systems and providing assurance of correctness to their end-users. In this paper, we focus on how we built abstractions and eliminated specifications to scale a verification engine for AWS access policies,               Zelkova               , to be usable by all AWS users. We present milestones from our journey from a thousand SMT invocations daily to an unprecedented billion SMT calls in a span of five years. In this paper, we talk about how the cloud is enabling application of formal methods, key insights into what made this scale of a billion SMT queries daily possible, and present some open scientific challenges for the formal methods community.},
  isbn = {978-3-031-13184-4 978-3-031-13185-1},
  langid = {english},
  file = {/Users/study/Zotero/storage/FRXPY58J/Rungta - 2022 - A Billion SMT Queries a Day (Invited Paper).pdf}
}

@inproceedings{saxenaSymbolicExecutionFramework2010,
  title = {A {{Symbolic Execution Framework}} for {{JavaScript}}},
  booktitle = {2010 {{IEEE Symposium}} on {{Security}} and {{Privacy}}},
  author = {Saxena, Prateek and Akhawe, Devdatta and Hanna, Steve and Mao, Feng and McCamant, Stephen and Song, Dawn},
  date = {2010},
  pages = {513--528},
  publisher = {IEEE},
  location = {Oakland, CA, USA},
  doi = {10.1109/SP.2010.38},
  url = {http://ieeexplore.ieee.org/document/5504700/},
  urldate = {2025-04-23},
  eventtitle = {2010 {{IEEE Symposium}} on {{Security}} and {{Privacy}}},
  isbn = {978-1-4244-6894-2},
  file = {/Users/study/Zotero/storage/AWUZ4VTS/Saxena et al. - 2010 - A Symbolic Execution Framework for JavaScript.pdf}
}

@inproceedings{saxenaSymbolicExecutionFramework2010a,
  title = {A {{Symbolic Execution Framework}} for {{JavaScript}}},
  booktitle = {2010 {{IEEE Symposium}} on {{Security}} and {{Privacy}}},
  author = {Saxena, Prateek and Akhawe, Devdatta and Hanna, Steve and Mao, Feng and McCamant, Stephen and Song, Dawn},
  date = {2010},
  pages = {513--528},
  publisher = {IEEE},
  location = {Oakland, CA, USA},
  doi = {10.1109/SP.2010.38},
  url = {http://ieeexplore.ieee.org/document/5504700/},
  urldate = {2025-04-27},
  eventtitle = {2010 {{IEEE Symposium}} on {{Security}} and {{Privacy}}},
  isbn = {978-1-4244-6894-2},
  note = {Kaluza}
}

@inproceedings{senJalangiSelectiveRecordreplay2013,
  title = {Jalangi: A Selective Record-Replay and Dynamic Analysis Framework for {{JavaScript}}},
  shorttitle = {Jalangi},
  booktitle = {Proceedings of the 2013 9th {{Joint Meeting}} on {{Foundations}} of {{Software Engineering}}},
  author = {Sen, Koushik and Kalasapur, Swaroop and Brutch, Tasneem and Gibbs, Simon},
  date = {2013-08-18},
  pages = {488--498},
  publisher = {ACM},
  location = {Saint Petersburg Russia},
  doi = {10.1145/2491411.2491447},
  url = {https://dl.acm.org/doi/10.1145/2491411.2491447},
  urldate = {2025-04-23},
  eventtitle = {{{ESEC}}/{{FSE}}'13: {{Joint Meeting}} of the {{European Software Engineering Conference}} and the {{ACM SIGSOFT Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  isbn = {978-1-4503-2237-9},
  langid = {english}
}

@online{SMTLIBSatisfiabilityModulo,
  title = {{{SMT-LIB The Satisfiability Modulo Theories Library}}},
  url = {https://smt-lib.org/theories-UnicodeStrings.shtml},
  urldate = {2025-06-17},
  file = {/Users/study/Zotero/storage/E4GHG92Y/theories-UnicodeStrings.html}
}

@article{tateishiPathIndexsensitiveString2013,
  title = {Path- and Index-Sensitive String Analysis Based on Monadic Second-Order Logic},
  author = {Tateishi, Takaaki and Pistoia, Marco and Tripp, Omer},
  date = {2013-10},
  journaltitle = {ACM Transactions on Software Engineering and Methodology},
  shortjournal = {ACM Trans. Softw. Eng. Methodol.},
  volume = {22},
  number = {4},
  pages = {1--33},
  issn = {1049-331X, 1557-7392},
  doi = {10.1145/2522920.2522926},
  url = {https://dl.acm.org/doi/10.1145/2522920.2522926},
  urldate = {2025-04-27},
  abstract = {We propose a novel technique for statically verifying the strings generated by a program. The verification is conducted by encoding the program in Monadic Second-order Logic (M2L). We use M2L to describe constraints among program variables and to abstract built-in string operations. Once we encode a program in M2L, a theorem prover for M2L, such as MONA, can automatically check if a string generated by the program satisfies a given specification, and if not, exhibit a counterexample. With this approach, we can naturally encode relationships among strings, accounting also for cases in which a program manipulates strings using indices. In addition, our string analysis is path sensitive in that it accounts for the effects of string and Boolean comparisons, as well as regular-expression matches.                            We have implemented our string analysis algorithm, and used it to augment an industrial security analysis for Web applications by automatically detecting and verifying               sanitizers               —methods that eliminate malicious patterns from untrusted strings, making these strings safe to use in security-sensitive operations. On the 8 benchmarks we analyzed, our string analyzer discovered 128 previously unknown sanitizers, compared to 71 sanitizers detected by a previously presented string analysis.},
  langid = {english},
  note = {PISA}
}

@inproceedings{wassermannSoundPreciseAnalysis2007,
  title = {Sound and Precise Analysis of Web Applications for Injection Vulnerabilities},
  booktitle = {Proceedings of the 28th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Wassermann, Gary and Su, Zhendong},
  date = {2007-06-10},
  pages = {32--41},
  publisher = {ACM},
  location = {San Diego California USA},
  doi = {10.1145/1250734.1250739},
  url = {https://dl.acm.org/doi/10.1145/1250734.1250739},
  urldate = {2025-04-23},
  eventtitle = {{{PLDI}} '07: {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  isbn = {978-1-59593-633-2},
  langid = {english}
}

@inproceedings{zhangDeepCombinationCDCLT2024,
  title = {Deep {{Combination}} of {{CDCL}}({{T}}) and {{Local Search}} for {{Satisfiability Modulo Non-Linear Integer Arithmetic Theory}}},
  booktitle = {Proceedings of the {{IEEE}}/{{ACM}} 46th {{International Conference}} on {{Software Engineering}}},
  author = {Zhang, Xindi and Li, Bohan and Cai, Shaowei},
  date = {2024-04-12},
  pages = {1--13},
  publisher = {ACM},
  location = {Lisbon Portugal},
  doi = {10.1145/3597503.3639105},
  url = {https://dl.acm.org/doi/10.1145/3597503.3639105},
  urldate = {2025-04-25},
  eventtitle = {{{ICSE}} '24: {{IEEE}}/{{ACM}} 46th {{International Conference}} on {{Software Engineering}}},
  isbn = {979-8-4007-0217-4},
  langid = {english}
}

@article{zhengZ3str2EfficientSolver2017,
  title = {Z3str2: An Efficient Solver for Strings, Regular Expressions, and Length Constraints},
  shorttitle = {Z3str2},
  author = {Zheng, Yunhui and Ganesh, Vijay and Subramanian, Sanu and Tripp, Omer and Berzish, Murphy and Dolby, Julian and Zhang, Xiangyu},
  date = {2017-06},
  journaltitle = {Formal Methods in System Design},
  shortjournal = {Form Methods Syst Des},
  volume = {50},
  number = {2--3},
  pages = {249--288},
  issn = {0925-9856, 1572-8102},
  doi = {10.1007/s10703-016-0263-6},
  url = {http://link.springer.com/10.1007/s10703-016-0263-6},
  urldate = {2025-04-27},
  langid = {english},
  note = {IBM AppScan}
}

@article{zhengZ3str2EfficientSolver2017a,
  title = {Z3str2: An Efficient Solver for Strings, Regular Expressions, and Length Constraints},
  shorttitle = {Z3str2},
  author = {Zheng, Yunhui and Ganesh, Vijay and Subramanian, Sanu and Tripp, Omer and Berzish, Murphy and Dolby, Julian and Zhang, Xiangyu},
  date = {2017-06},
  journaltitle = {Formal Methods in System Design},
  shortjournal = {Form Methods Syst Des},
  volume = {50},
  number = {2--3},
  pages = {249--288},
  issn = {0925-9856, 1572-8102},
  doi = {10.1007/s10703-016-0263-6},
  url = {http://link.springer.com/10.1007/s10703-016-0263-6},
  urldate = {2025-05-25},
  langid = {english},
  file = {/Users/study/Zotero/storage/AWH58MYX/Zheng et al. - 2017 - Z3str2 an efficient solver for strings, regular expressions, and length constraints.pdf}
}

@inproceedings{zhengZ3strZ3basedString2013,
  title = {Z3-Str: A Z3-Based String Solver for Web Application Analysis},
  shorttitle = {Z3-Str},
  booktitle = {Proceedings of the 2013 9th {{Joint Meeting}} on {{Foundations}} of {{Software Engineering}}},
  author = {Zheng, Yunhui and Zhang, Xiangyu and Ganesh, Vijay},
  date = {2013-08-18},
  pages = {114--124},
  publisher = {ACM},
  location = {Saint Petersburg Russia},
  doi = {10.1145/2491411.2491456},
  url = {https://dl.acm.org/doi/10.1145/2491411.2491456},
  urldate = {2025-05-25},
  eventtitle = {{{ESEC}}/{{FSE}}'13: {{Joint Meeting}} of the {{European Software Engineering Conference}} and the {{ACM SIGSOFT Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  isbn = {978-1-4503-2237-9},
  langid = {english},
  file = {/Users/study/Zotero/storage/K3NYHREJ/Zheng et al. - 2013 - Z3-str a z3-based string solver for web application analysis.pdf}
}

@video{zotero-item-72,
  entrysubtype = {video}
}
